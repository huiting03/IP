import sympy as sm

M, m, ell, g, x1, x2, x3, x4, F = \
    sm.symbols('M, m, ell, g, x1, x2, x3, x4, F')

phi = 4 * m * ell * x4**2 * sm.sin(x3) + 4 * F - 3 * m * g * sm.sin(x3) * sm.cos(x3)
phi /= 4* (M + m) - 3 * m * sm.cos(x3)**2

psi = m * ell * x4**2 * sm.sin(x3)*sm.cos(x3) + F * sm.cos(x3) -(M + m)* g * sm.sin(x3)
psi /= (-3) * ell *(4*(M + m) - 3 * m * sm.cos(x3)**2)

dphi_F = phi.diff(F)
dphi_x3 = phi.diff(x3)
dphi_x4 = phi.diff(x4)

dpsi_F = psi.diff(F)
dpsi_x3 = psi.diff(x3)
dpsi_x4 = psi.diff(x4)

dphi_F_eq = dphi_F.subs([(F,0), (x3,0),(x4,0)])
dphi_x3_eq = dphi_x3.subs([(F,0),(x3,0),(x4,0)])
dphi_x4_eq = dphi_x4.subs([(F,0),(x3,0),(x4,0)])

dpsi_F_eq = dpsi_F.subs([(F,0), (x3,0),(x4,0)])
dpsi_x3_eq = dpsi_x3.subs([(F,0),(x3,0),(x4,0)])
dpsi_x4_eq = dpsi_x4.subs([(F,0),(x3,0),(x4,0)])


a = dphi_F_eq
b = -dphi_x3_eq
c = -dpsi_F_eq
d = dpsi_x3_eq

M_num = 0.3
m_num = 0.1
ell_num = 0.35
g_num = 9.81

def substitute_num(v):
    """
    :param v: v = a, b, c , d
    :return: v.subs([(M, M_num),(m, m_num),(ell, ell_num),(g, g_num)])
    """
    return v.subs([(M, M_num),(m, m_num),(ell, ell_num),(g, g_num)])

a_num = substitute_num(a)
b_num = substitute_num(b)
c_num = substitute_num(c)
d_num = substitute_num(d)

#sm.pprint(a)
#print(a_num)

s = sm.symbols('s',real = True, positive = True)
t = sm.symbols('t',real = True, positive = True)
a,b,c,d =sm.symbols('a, b, c, d',real = True, positive = True)
G_s = -c / (s **2-d)
G_sx = a*s**2 - a*d + b*c
G_sx /= s**4 - s**2 * d

w = sm. symbols('w', real = True, positive = True)
F_s = w / (s**2 +w**2)
U_s = G_s * F_s
U_sx = G_sx * F_s
U_t = sm.inverse_laplace_transform(U_s, s, t)
U_tx = sm.inverse_laplace_transform(U_sx, s, t)

sm.pprint(U_t.simplify())
sm.pprint(U_tx.simplify())
